# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Build and Deploy Spring Boot App

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 17 for Java
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '21'

    # Step 3: Cache Maven dependencies to speed up build
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    # Step 4: Build the Spring Boot application
    - name: Build with Maven
      run: mvn clean package

    # Step 5: Run the Spring Boot application
    - name: Run Spring Boot Application
      run: |
        java -jar target/*.jar &
        echo "Spring Boot application is starting..."

    # Step 6: Wait for Spring Boot to start (Adjust the time as needed)
    - name: Wait for Spring Boot to start
      run: sleep 10

    # Step 7: Test the application is running and accessible
    - name: Test Application
      run: curl --fail http://localhost:8080/get-todo || exit 1

    # Step 5: Install ngrok
    - name: Download and Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null &&
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list &&
        sudo apt update && sudo apt install ngrok

    # Step 6: Start ngrok to expose the Spring Boot app on port 8080
    - name: Expose Application with ngrok
      run: |
        nohup ngrok http 8080 > /dev/null 2>&1 &
        sleep 10
        curl http://127.0.0.1:4040/api/tunnels > ngrok_response.json
        echo "ngrok is now exposing your application"

    # Step 7: Display the public URL from ngrok
    - name: Get ngrok URL
      run: |
        cat ngrok_response.json
        PUBLIC_URL=$(cat ngrok_response.json | jq -r '.tunnels[0].public_url')
        echo "Your application is now publicly accessible at: $PUBLIC_URL"
        echo "::set-output name=NGROK_URL::$PUBLIC_URL"
