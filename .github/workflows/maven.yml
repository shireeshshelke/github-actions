# Github action pipeline which Builds, Tests, Containerize and Deploy the Sample SpringBoot application
name: Build and Deploy Spring Boot App

on:
  push:
    branches:
      - main
      
jobs:
  build-app:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 21 for Java
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # Step 3: Cache Maven dependencies to speed up build
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    # Step 4: Build the Spring Boot application
    - name: Build with Maven
      run: |
        cd todo-list
        mvn clean install
        
    # Step 5: Upload the artifact (file) to share with the next job
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: todo-files
        path: |
          ./todo-list/target/*.jar
          ./todo-list/Dockerfile
        if-no-files-found: error

  Test-Application:
    runs-on: ubuntu-latest
    needs: ["build-app"]
    steps:
    # Step 1: Download shared artifacts
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: todo-files
        path: ./app
        
    # Step 2: Set up JDK 21 for Java
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
      
    # Step 3: Run the Spring Boot application
    - name: Run Spring Boot Application
      run: |
        java -jar ./app/target/*.jar &
        echo "Spring Boot application is starting..."

    # Step 4: Wait for Spring Boot to start (Adjust the time as needed)
    - name: Wait for Spring Boot to start
      run: sleep 5

    # Step 7: Test the application is running and accessible
    - name: Test Application
      run: curl --fail http://localhost:8080/get-todo || exit 1        
  
  Deploy-Application:
    runs-on: ubuntu-latest
    needs: ["Test-Application"]
    steps:
    # Step 1: Download shared artifacts
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: todo-files
        path: ./app

    # Step 2: Build docker image using Dockerfile
    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest ./app

    # Step 3: Log in to Docker Hub with secrets
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    # Step 4: Push the Docker image to Docker Hub
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest

  Run-Docker-Image:
    runs-on: ubuntu-latest
    needs: ["Deploy-Application"]  # Only run this job if the build job succeeds

    steps:
      # Step 1: Pull the Docker image from Docker Hub
      - name: Pull Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest

      # Step 2: Run the Docker container
      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 --name spring-boot-container ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest

      # Step 3: Check if the application is running
      - name: Wait for Spring Boot App to Start
        run: |
          sleep 5  # Wait for the app to start
          curl http://localhost:8080/get-todo  # Check the health of the app
